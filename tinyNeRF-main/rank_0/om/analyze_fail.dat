# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] Default_wrapper.9
# In file D:\my_projects\tinyNeRF-main\NeRF.py:258/    def construct(self, x):/
funcgraph fg_9(
        %para1 : Tensor(F64)[16384, 39]    # x
        , %para2 : Ref[Tensor(F32)][128]    # nerf.0.bias
        , %para3 : Ref[Tensor(F32)][128, 39]    # nerf.0.weight
        , %para4 : Ref[Tensor(F32)][128]    # nerf.2.bias
        , %para5 : Ref[Tensor(F32)][128, 128]    # nerf.2.weight
        , %para6 : Ref[Tensor(F32)][128]    # nerf.4.bias
        , %para7 : Ref[Tensor(F32)][128, 128]    # nerf.4.weight
        , %para8 : Ref[Tensor(F32)][4]    # nerf.6.bias
        , %para9 : Ref[Tensor(F32)][4, 128]    # nerf.6.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_10(%para1)    #(Tensor(F64)[16384, 39])    # fg_10=Default.10 #scope: Default
#[CNode]19
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file D:\my_projects\tinyNeRF-main\NeRF.py:264/      return x/#[CNode]20
}
# order:
#   1: @Default_wrapper.9:[CNode]19{[0]: ValueNode<FuncGraph> Default.10, [1]: x}
#   2: @Default_wrapper.9:[CNode]20{[0]: ValueNode<Primitive> Return, [1]: [CNode]19}


# [No.2] Default.10
# In file D:\my_projects\tinyNeRF-main\NeRF.py:258/    def construct(self, x):/
funcgraph fg_10[fg_9](
        %para10 : Tensor(F64)[16384, 39]    # x
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_11(%para10)    #(Tensor(F64)[16384, 39])    # fg_11=SequentialCell.11 #scope: Default
      # In file D:\my_projects\tinyNeRF-main\NeRF.py:263/      x = self.nerf(x)/#x
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file D:\my_projects\tinyNeRF-main\NeRF.py:264/      return x/#[CNode]21
}
# order:
#   1: @Default.10:x{[0]: ValueNode<FuncGraph> SequentialCell.11, [1]: x}
#   2: @Default.10:[CNode]21{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.3] SequentialCell.11
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:277/    def construct(self, input_data):/
funcgraph fg_11[fg_9](
        %para11 : Tensor(F64)[16384, 39]    # input_data
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_12(I64(0), %para11)    #(I64NoShape, Tensor(F64)[16384, 39])    # fg_12=↵SequentialCell.12 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]22
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]23
}
# order:
#   1: @SequentialCell.11:[CNode]24{[0]: ValueNode<FuncGraph> ms_len.25, [1]: [CNode]26}
#   2: @SequentialCell.11:[CNode]22{[0]: ValueNode<FuncGraph> ↵SequentialCell.12, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: @SequentialCell.11:[CNode]23{[0]: ValueNode<Primitive> Return, [1]: [CNode]22}


# [No.4] ↵SequentialCell.12
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/
funcgraph fg_12[fg_11](
        %para12 : I64NoShape    # @[CNode]13
        , %para13 : Tensor(F64)[16384, 39]    # фinput_data
    ) {
    %1 : $(SequentialCell.11):Tuple[Func*7]TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape) = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_15, FuncGraph::fg_27, FuncGraph::fg_28, FuncGraph::fg_29, FuncGraph::fg_30, FuncGraph::fg_31, FuncGraph::fg_32)    #(FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape)    # fg_15=Dense.15, fg_27=ReLU.27, fg_28=Dense.28, fg_29=ReLU.29, fg_30=Dense.30, fg_31=ReLU.31, fg_32=Dense.32 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]26
    %2 : $(SequentialCell.11):I64NoShape = FuncGraph::fg_25(%1)    #(Tuple[Func*7]TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape))    # fg_25=ms_len.25 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]24
    %3 : BoolNoShape = MultitypeFuncGraph::less{(Tensor, Tensor), (Number, Tensor), (Number, Number), (Tensor, Number), (String, String)}(%para12, %2)    #(I64NoShape, I64NoShape) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]33
    %4 : FuncNoShape = Primitive::Switch{prim_type=1}(%3, FuncGraph::fg_14, FuncGraph::fg_34)    #(BoolNoShape, FuncNoShape, FuncNoShape)    # fg_14=↻SequentialCell.14, fg_34=↓SequentialCell.34 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]35

#------------------------> 3
    %5 = %4() #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]36
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]37
}
# order:
#   1: @↵SequentialCell.12:[CNode]33{[0]: ValueNode<MultitypeFuncGraph> less.38, [1]: @[CNode]13, [2]: [CNode]24}
#   2: @↵SequentialCell.12:[CNode]35{[0]: ValueNode<Primitive> Switch, [1]: [CNode]33, [2]: ValueNode<FuncGraph> ↻SequentialCell.14, [3]: ValueNode<FuncGraph> ↓SequentialCell.34}
#   3: @↵SequentialCell.12:[CNode]36{[0]: [CNode]35}
#   4: @↵SequentialCell.12:[CNode]37{[0]: ValueNode<Primitive> Return, [1]: [CNode]36}


# [No.5] ↻SequentialCell.14
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/
funcgraph fg_14[fg_12](
) {
    %1 : I64NoShape = MultitypeFuncGraph::add{(Tensor, COOTensor), (Tensor, Tuple), (Tuple, Tensor), (Number, Tensor), (String, String), (RowTensor, Tensor), (List, Tensor), (Tensor, List), (List, List), (NoneType, NoneType), (Tensor, Tensor), (CSRTensor, CSRTensor), (Number, Number), (Tensor, Number), (Tuple, Tuple), (COOTensor, Tensor), (COOTensor, COOTensor)}(%para12, I64(1))    #(I64NoShape, I64NoShape) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]13
    %2 : I64NoShape = Primitive::stop_gradient{prim_type=1}(%1)    #(I64NoShape) #scope: Default/nerf-SequentialCell
      # In file D:\my_projects\tinyNeRF-main\NeRF.py:263/      x = self.nerf(x)/#[CNode]39
    %3 : $(SequentialCell.11):Tuple[Func*7]TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape) = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_15, FuncGraph::fg_27, FuncGraph::fg_28, FuncGraph::fg_29, FuncGraph::fg_30, FuncGraph::fg_31, FuncGraph::fg_32)    #(FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape, FuncNoShape)    # fg_15=Dense.15, fg_27=ReLU.27, fg_28=Dense.28, fg_29=ReLU.29, fg_30=Dense.30, fg_31=ReLU.31, fg_32=Dense.32 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]26
    %4 : FuncNoShape = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%3, %para12)    #(Tuple[Func*7]TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape), I64NoShape) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#cell

#------------------------> 4
    %5 = %4(%para13)    #(Tensor(F64)[16384, 39]) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:279/            input_data = cell(input_data)/#input_data
    %6 = FuncGraph::fg_12(%1, %5)    #(I64NoShape, Undefined)    # fg_12=↵SequentialCell.12 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]40
    %7 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%6, %2)    #(Undefined, I64NoShape) #scope: Default/nerf-SequentialCell
      # In file D:\my_projects\tinyNeRF-main\NeRF.py:263/      x = self.nerf(x)/#[CNode]41
    Primitive::Return{prim_type=1}(%7)    #(Undefined) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#[CNode]42
}
# order:
#   1: @↻SequentialCell.14:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]26, [2]: @[CNode]13}
#   2: @↻SequentialCell.14:[CNode]13{[0]: ValueNode<MultitypeFuncGraph> add.43, [1]: @[CNode]13, [2]: ValueNode<Int64Imm> 1}
#   3: @↻SequentialCell.14:input_data{[0]: cell, [1]: фinput_data}
#   4: @↻SequentialCell.14:[CNode]40{[0]: ValueNode<FuncGraph> ↵SequentialCell.12, [1]: [CNode]13, [2]: input_data}
#   5: @↻SequentialCell.14:[CNode]42{[0]: ValueNode<Primitive> Return, [1]: [CNode]41}


# [No.6] Dense.15
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:463/    def construct(self, x):/
funcgraph fg_15[fg_9](
        %para14 : Tensor(F64)[16384, 39]    # x
    ) {

#------------------------> 5
    %1 = FuncGraph::fg_16(%para14, %para2, %para3)    #(Tensor(F64)[16384, 39], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128, 39])    # fg_16=L-Dense.16 #scope: Default
#[CNode]44
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#[CNode]45
}
# order:
#   1: @Dense.15:[CNode]44{[0]: ValueNode<FuncGraph> L-Dense.16, [1]: x, [2]: nerf.0.bias, [3]: nerf.0.weight}
#   2: @Dense.15:[CNode]45{[0]: ValueNode<Primitive> Return, [1]: [CNode]44}


# [No.7] L-Dense.16
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:463/    def construct(self, x):/
funcgraph fg_16(
        %para15 : Tensor(F64)[16384, 39]    # x
        , %para16 : Ref[Tensor(F32)][128]    # L-nerf.0.bias
        , %para17 : Ref[Tensor(F32)][128, 39]    # L-nerf.0.weight
    ) {
    %1 : Tuple[I64*2]TupleShape(NoShape, NoShape) = DoSignaturePrimitive::S-Prim-Shape{prim_type=1}(%para15)    #(Tensor(F64)[16384, 39]) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:473/        if len(x_shape) != 2:/#фx_shape
    %2 : NoneTypeNoShape = DoSignaturePrimitive::S-Prim-check_dense_input_shape{prim_type=1}(%1, "Dense")    #(Tuple[I64*2]TupleShape(NoShape, NoShape), StringNoShape) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:465/        check_dense_input_shape(x_shape, self.cls_name)/#46
    %3 : NoneTypeNoShape = Primitive::stop_gradient{prim_type=1}(%2)    #(NoneTypeNoShape) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#47
    %4 : I64NoShape = FuncGraph::fg_48(%1)    #(Tuple[I64*2]TupleShape(NoShape, NoShape))    # fg_48=L-ms_len.48 #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#49
    %5 : BoolNoShape = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%4, I64(2))    #(I64NoShape, I64NoShape) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#50
    %6 : BoolNoShape = FuncGraph::fg_51(%5)    #(BoolNoShape)    # fg_51=L-bool_.51 #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#52
    %7 : FuncNoShape = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_53, FuncGraph::fg_54)    #(BoolNoShape, FuncNoShape, FuncNoShape)    # fg_53=L-✓Dense.53, fg_54=L-✗Dense.54 #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#55
    %8 : Tensor(F64)[16384, 39] = %7() #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#56

#------------------------> 6
    %9 = FuncGraph::fg_17(%8)    #(Tensor(F64)[16384, 39])    # fg_17=L-↓Dense.17 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#57
    %10 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%9, %3)    #(Undefined, NoneTypeNoShape) #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#58
    Primitive::Return{prim_type=1}(%10)    #(Undefined) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/#[CNode]45
}
# order:
#   1: @L-Dense.16:фx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: @L-Dense.16:46{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: фx_shape, [2]: ValueNode<StringImm> Dense}
#   3: @L-Dense.16:49{[0]: ValueNode<FuncGraph> L-ms_len.48, [1]: фx_shape}
#   4: @L-Dense.16:50{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: 49, [2]: ValueNode<Int64Imm> 2}
#   5: @L-Dense.16:52{[0]: ValueNode<FuncGraph> L-bool_.51, [1]: 50}
#   6: @L-Dense.16:55{[0]: ValueNode<Primitive> Switch, [1]: 52, [2]: ValueNode<FuncGraph> L-✓Dense.53, [3]: ValueNode<FuncGraph> L-✗Dense.54}
#   7: @L-Dense.16:56{[0]: 55}
#   8: @L-Dense.16:57{[0]: ValueNode<FuncGraph> L-↓Dense.17, [1]: 56}
#   9: @L-Dense.16:58{[0]: ValueNode<Primitive> Depend, [1]: 57, [2]: 47}
#  10: @L-Dense.16:[CNode]45{[0]: ValueNode<Primitive> Return, [1]: 58}


# [No.8] L-↓Dense.17
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:466/        if len(x_shape) != 2:/
funcgraph fg_17[fg_16](
        %para18 : Tensor(F64)[16384, 39]    # фx
    ) {
    %1 : BoolNoShape = FuncGraph::fg_51(Bool(1))    #(BoolNoShape)    # fg_51=L-bool_.51 #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:469/        if self.has_bias:/#59
    %2 : FuncNoShape = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_18, FuncGraph::fg_60)    #(BoolNoShape, FuncNoShape, FuncNoShape)    # fg_18=L-✓↓Dense.18, fg_60=L-✗↓Dense.60 #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:469/        if self.has_bias:/#61

#------------------------> 7
    %3 = %2() #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:469/        if self.has_bias:/#62
    %4 = FuncGraph::fg_63(%3)    #(Undefined)    # fg_63=L-↓↓Dense.63 #scope: Default/nerf-SequentialCell
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:278/        for cell in self.cell_list:/#64
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:469/        if self.has_bias:/#65
}
# order:
#   1: @L-↓Dense.17:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: фx, [2]: L-nerf.0.weight}
#   2: @L-↓Dense.17:59{[0]: ValueNode<FuncGraph> L-bool_.51, [1]: ValueNode<BoolImm> true}
#   3: @L-↓Dense.17:61{[0]: ValueNode<Primitive> Switch, [1]: 59, [2]: ValueNode<FuncGraph> L-✓↓Dense.18, [3]: ValueNode<FuncGraph> L-✗↓Dense.60}
#   4: @L-↓Dense.17:62{[0]: 61}
#   5: @L-↓Dense.17:64{[0]: ValueNode<FuncGraph> L-↓↓Dense.63, [1]: 62}
#   6: @L-↓Dense.17:65{[0]: ValueNode<Primitive> Return, [1]: 64}


# [No.9] L-✓↓Dense.18
# In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:469/        if self.has_bias:/
funcgraph fg_18[fg_17](
) {

#------------------------> 8
    %1 = $(L-↓Dense.17):DoSignaturePrimitive::S-Prim-MatMul{prim_type=1}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%para18, %para17)    #(Tensor(F64)[16384, 39], Ref[Tensor(F32)][128, 39]) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:468/        x = self.matmul(x, self.weight)/#x
    %2 = DoSignaturePrimitive::S-Prim-BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%1, %para16)    #(Undefined, Ref[Tensor(F32)][128]) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:470/            x = self.bias_add(x, self.bias)/#x
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/nerf-SequentialCell/0-Dense
      # In file C:\ProgramData\Anaconda3\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:469/        if self.has_bias:/#66
}
# order:
#   1: @L-✓↓Dense.18:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-nerf.0.bias}
#   2: @L-✓↓Dense.18:66{[0]: ValueNode<Primitive> Return, [1]: x}


#===============================================================================
# num of function graphs in stack: 9/10 (Ignored 1 internal frames).
